#!/usr/bin/env python3
"""
Script de an√°lisis para desarrollo - Interpretaci√≥n de resultados del modelo
Ayuda a entender qu√© est√° detectando el modelo para mejorar el entrenamiento
"""

import cv2
import numpy as np
import json
import os
from main import SistemaSegmentacionCoples
from config import DevConfig

def analizar_resultado_detallado():
    """
    Ejecuta el sistema con an√°lisis detallado activado.
    """
    print("üîç MODO AN√ÅLISIS DETALLADO PARA DESARROLLO")
    print("=" * 60)
    print("Este modo proporciona informaci√≥n completa sobre:")
    print("- Detecciones individuales del modelo")
    print("- Procesamiento de m√°scaras paso a paso")
    print("- Estad√≠sticas de conectividad")
    print("- Archivos debug adicionales")
    print("=" * 60)
    
    # Verificar que el modo debug est√° activado
    if not DevConfig.DEBUG_INFERENCE:
        print("‚ö†Ô∏è  Activando modo DEBUG en configuraci√≥n...")
        DevConfig.DEBUG_INFERENCE = True
        DevConfig.DEBUG_MASKS = True
        DevConfig.SAVE_INTERMEDIATE_RESULTS = True
    
    # Inicializar sistema
    sistema = SistemaSegmentacionCoples()
    
    if not sistema.inicializar():
        print("‚ùå Error inicializando el sistema")
        return
    
    # Mostrar configuraci√≥n del modelo
    info_modelo = sistema.segmentador.obtener_info_modelo()
    print(f"\nüìã CONFIGURACI√ìN DEL MODELO:")
    print(f"   - Modelo: {info_modelo['ruta_modelo']}")
    print(f"   - Clases: {info_modelo['clases']}")
    print(f"   - Umbral confianza: {info_modelo['umbral_confianza']}")
    print(f"   - M√°x. detecciones: {info_modelo['max_detecciones']}")
    
    # Crear ventana
    cv2.namedWindow('An√°lisis Detallado', cv2.WINDOW_NORMAL)
    
    try:
        print(f"\nüéØ Comandos disponibles:")
        print(f"   ENTER - Capturar con an√°lisis detallado")
        print(f"   'q' - Salir")
        
        frame_count = 0
        
        while True:
            entrada = input(f"\nüîç An√°lisis #{frame_count + 1}: ").strip().lower()
            
            if entrada == 'q':
                break
            
            elif entrada == '':
                print(f"\n{'='*80}")
                print(f"üéØ AN√ÅLISIS DETALLADO #{frame_count + 1}")
                print(f"{'='*80}")
                
                # Capturar con an√°lisis detallado
                frame, mascara, imagen_coloreada, t_cap, t_inf, t_total = sistema.capturar_y_segmentar()
                
                if frame is not None and mascara is not None:
                    frame_count += 1
                    
                    # Mostrar informaci√≥n resumida
                    print(f"\nüìä RESUMEN DEL AN√ÅLISIS:")
                    print(f"   ‚è±Ô∏è  Tiempo total: {t_total:.2f}ms")
                    print(f"   üéØ Defectos detectados: {np.sum(mascara == 1)} p√≠xeles")
                    print(f"   üìè Resoluci√≥n: {frame.shape[1]}x{frame.shape[0]}")
                    
                    # Guardar imagen
                    filepath = sistema.guardar_imagen(
                        imagen_coloreada if imagen_coloreada is not None else frame, 
                        mascara
                    )
                    
                    # Mostrar an√°lisis de archivos generados
                    if filepath:
                        analizar_archivos_generados(filepath)
                    
                    # Mostrar imagen
                    if imagen_coloreada is not None:
                        cv2.imshow('An√°lisis Detallado', imagen_coloreada)
                        cv2.waitKey(1)
                    
                    print(f"\n{'='*80}")
                    
                else:
                    print("‚ö†Ô∏è No se pudo capturar o procesar la imagen")
    
    finally:
        sistema.liberar()
        cv2.destroyAllWindows()

def analizar_archivos_generados(filepath):
    """
    Analiza los archivos debug generados.
    
    Args:
        filepath (str): Ruta del archivo principal
    """
    base_name = os.path.splitext(filepath)[0]
    
    # Analizar estad√≠sticas JSON
    stats_path = f"{base_name}_stats.json"
    if os.path.exists(stats_path):
        print(f"\nüìä AN√ÅLISIS DE ESTAD√çSTICAS:")
        try:
            with open(stats_path, 'r') as f:
                stats = json.load(f)
            
            print(f"   üìê An√°lisis de √°reas:")
            if stats['areas']:
                areas_sorted = sorted(stats['areas'], reverse=True)
                for i, area in enumerate(areas_sorted[:5]):
                    porcentaje = (area / stats['total_pixels']) * 100
                    print(f"      - Regi√≥n {i+1}: {area:.0f} p√≠xeles ({porcentaje:.4f}%)")
            
            print(f"   üìä Distribuci√≥n:")
            print(f"      - Total p√≠xeles: {stats['total_pixels']:,}")
            print(f"      - P√≠xeles defectuosos: {stats['defect_pixels']:,}")
            print(f"      - Porcentaje: {stats['percentage']:.4f}%")
            print(f"      - Regiones: {stats['num_regions']}")
            print(f"      - √Årea promedio: {stats['avg_area']:.1f} p√≠xeles")
            
        except Exception as e:
            print(f"   ‚ùå Error leyendo estad√≠sticas: {e}")
    
    # Analizar m√°scara
    mask_path = f"{base_name}_mask.png"
    if os.path.exists(mask_path):
        print(f"\nüé≠ AN√ÅLISIS DE M√ÅSCARA:")
        try:
            mask_img = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
            if mask_img is not None:
                unique_values = np.unique(mask_img)
                print(f"   üìä Valores en m√°scara: {unique_values}")
                
                # An√°lisis de conectividad
                contours, _ = cv2.findContours(mask_img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
                print(f"   üîó Componentes conectados: {len(contours)}")
                
                # Informaci√≥n de forma
                if contours:
                    print(f"   üìê An√°lisis de forma:")
                    for i, contour in enumerate(contours):
                        area = cv2.contourArea(contour)
                        perimeter = cv2.arcLength(contour, True)
                        
                        if area > 0:
                            # Calcular m√©tricas de forma
                            aspect_ratio = cv2.boundingRect(contour)[2] / cv2.boundingRect(contour)[3]
                            solidity = area / cv2.contourArea(cv2.convexHull(contour))
                            
                            print(f"      - Componente {i+1}: √°rea={area:.0f}, per√≠metro={perimeter:.1f}")
                            print(f"        ‚Üí Aspecto: {aspect_ratio:.2f}, Solidez: {solidity:.2f}")
                
        except Exception as e:
            print(f"   ‚ùå Error analizando m√°scara: {e}")

def interpretar_salida_modelo():
    """
    Ayuda a interpretar la salida espec√≠fica del modelo.
    """
    print("\nüìã INTERPRETACI√ìN DE SALIDA DEL MODELO")
    print("=" * 50)
    print()
    
    print("üîç SIGNIFICADO DE LOS N√öMEROS:")
    print("   1. 'Detecciones encontradas: N' = N√∫mero de objetos detectados")
    print("   2. 'M√°scara real generada: X p√≠xeles' = P√≠xeles por detecci√≥n individual")
    print("   3. 'P√≠xeles defectuosos: Y' = Total final combinado")
    print("   4. 'Regiones detectadas: Z' = Componentes conectados en m√°scara final")
    print()
    
    print("‚ö†Ô∏è  POSIBLES INCONSISTENCIAS:")
    print("   - Detecciones = 3, pero p√≠xeles no suman")
    print("   - M√°scaras individuales peque√±as vs total grande")
    print("   - Regiones diferentes a detecciones")
    print()
    
    print("üéØ PARA MEJORAR EL ENTRENAMIENTO:")
    print("   1. Verificar que las detecciones corresponden a defectos reales")
    print("   2. Revisar si las m√°scaras siguen la forma correcta")
    print("   3. Validar que no hay superposici√≥n excesiva")
    print("   4. Confirmar que el umbral de confianza es adecuado")
    print()
    
    print("üìä USAR MODO DEBUG PARA VER:")
    print("   - Coordenadas exactas de cada detecci√≥n")
    print("   - Coeficientes de m√°scara por detecci√≥n")
    print("   - Estad√≠sticas de conectividad")
    print("   - Archivos separados para an√°lisis manual")

def modo_comparacion():
    """
    Modo para comparar diferentes configuraciones del modelo.
    """
    print("\nüîÑ MODO COMPARACI√ìN DE CONFIGURACIONES")
    print("=" * 50)
    
    configuraciones = [
        {
            'nombre': 'Actual',
            'modelo': 'coples_seg1C4V.onnx',
            'confianza': 0.5,
            'max_detecciones': 3
        },
        {
            'nombre': 'Menos estricto',
            'modelo': 'coples_seg1C4V.onnx',
            'confianza': 0.3,
            'max_detecciones': 5
        },
        {
            'nombre': 'M√°s estricto',
            'modelo': 'coples_seg1C4V.onnx',
            'confianza': 0.7,
            'max_detecciones': 2
        }
    ]
    
    print("üìã Configuraciones disponibles:")
    for i, config in enumerate(configuraciones):
        print(f"   {i+1}. {config['nombre']}: confianza={config['confianza']}, max_det={config['max_detecciones']}")
    
    print("\nüí° Para implementar: Modificar InferenceConfig en config.py")
    print("   - CONFIDENCE_THRESHOLD para cambiar umbral")
    print("   - MAX_DETECTIONS para cambiar l√≠mite")

if __name__ == "__main__":
    print("üîç HERRAMIENTAS DE AN√ÅLISIS PARA DESARROLLO")
    print("=" * 50)
    print("1. An√°lisis detallado con debug")
    print("2. Interpretaci√≥n de salida del modelo")
    print("3. Modo comparaci√≥n de configuraciones")
    print("4. Salir")
    
    while True:
        opcion = input("\nElige opci√≥n (1-4): ").strip()
        
        if opcion == "1":
            analizar_resultado_detallado()
        elif opcion == "2":
            interpretar_salida_modelo()
        elif opcion == "3":
            modo_comparacion()
        elif opcion == "4":
            print("üëã ¬°Hasta luego!")
            break
        else:
            print("‚ùì Opci√≥n no v√°lida. Intenta de nuevo.") 